/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/admin/auth/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authentication */
        post: operations["UserAuthController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authentication */
        post: operations["UserAuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/_me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Authentication */
        get: operations["UserAuthController_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/edit-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Authentication */
        put: operations["UserAuthController_editProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authentication */
        post: operations["UserAuthController_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Authentication */
        put: operations["UserAuthController_changePassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/change-avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Authentication */
        put: operations["UserAuthController_changeAvatar"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/confirm-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authentication */
        post: operations["UserAuthController_confirmPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/change-confirm-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authentication */
        post: operations["UserAuthController_changeConfirmPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/settings/core": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Setting */
        get: operations["SettingAdminController_getUserMaxCertificate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/settings/clean": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Setting */
        get: operations["SettingAdminController_clean"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Setting */
        get: operations["SettingAdminController_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/settings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Setting */
        get: operations["SettingAdminController_get"];
        /** Setting */
        put: operations["SettingAdminController_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/dashboard/view-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Dashboard */
        get: operations["DashboardAdminController_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/dashboard/refresh-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Dashboard */
        get: operations["DashboardAdminController_refresh"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/dashboard/view-data-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Dashboard */
        get: operations["DashboardAdminController_viewDataList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Key */
        get: operations["ApiKeyAdminController_list"];
        put?: never;
        /** Api Key */
        post: operations["ApiKeyAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/api-keys/map-shorted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Key */
        get: operations["ApiKeyAdminController_mapShorted"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/api-keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Key */
        get: operations["ApiKeyAdminController_get"];
        /** Api Key */
        put: operations["ApiKeyAdminController_update"];
        post?: never;
        /** Api Key */
        delete: operations["ApiKeyAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/api-keys/{id}/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Api Key */
        patch: operations["ApiKeyAdminController_reset"];
        trace?: never;
    };
    "/api/admin/api-keys/{id}/renew": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Api Key */
        patch: operations["ApiKeyAdminController_renew"];
        trace?: never;
    };
    "/api/admin/api-keys/{id}/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Api Key */
        put: operations["ApiKeyAdminController_inactive"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/api-keys/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Api Key */
        put: operations["ApiKeyAdminController_active"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/app-versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Version */
        get: operations["AppVersionAdminController_list"];
        put?: never;
        /** Api Version */
        post: operations["AppVersionAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/app-versions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Version */
        get: operations["AppVersionAdminController_get"];
        /** Api Version */
        put: operations["AppVersionAdminController_update"];
        post?: never;
        /** Api Version */
        delete: operations["AppVersionAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/app-versions/{id}/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Api Version */
        put: operations["AppVersionAdminController_inactive"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/app-versions/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Api Version */
        put: operations["AppVersionAdminController_active"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** User */
        get: operations["UserAdminController_list"];
        put?: never;
        /** User */
        post: operations["UserAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** User */
        get: operations["UserAdminController_get"];
        /** User */
        put: operations["UserAdminController_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{id}/login-histories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** User */
        get: operations["UserAdminController_getLoginHistories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{id}/change-avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** User */
        put: operations["UserAdminController_changeAvatar"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Role */
        get: operations["RoleAdminController_list"];
        put?: never;
        /** Role */
        post: operations["RoleAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/roles/map-shorted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Role */
        get: operations["RoleAdminController_mapShorted"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/roles/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Role */
        get: operations["RoleAdminController_new"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Role */
        get: operations["RoleAdminController_get"];
        /** Role */
        put: operations["RoleAdminController_update"];
        post?: never;
        /** Role */
        delete: operations["RoleAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/roles/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Role */
        put: operations["RoleAdminController_active"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/roles/{id}/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Role */
        put: operations["RoleAdminController_inactive"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Permission */
        get: operations["PermissionAdminController_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Member */
        get: operations["MemberAdminController_list"];
        put?: never;
        /** Member */
        post: operations["MemberAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/members/map-shorted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Member */
        get: operations["MemberAdminController_mapShorted"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/members/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Member */
        get: operations["MemberAdminController_get"];
        /** Member */
        put: operations["MemberAdminController_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/members/{id}/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Member */
        put: operations["MemberAdminController_inactive"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/members/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Member */
        put: operations["MemberAdminController_active"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/members/{id}/change-avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Member */
        put: operations["MemberAdminController_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/members/{id}/points": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Member */
        post: operations["MemberAdminController_addPoint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tier-histories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Tier History */
        get: operations["TierHistoryAdminController_list"];
        put?: never;
        /** Tier History */
        post: operations["TierHistoryAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tier-histories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Tier History */
        get: operations["TierHistoryAdminController_get"];
        /** Tier History */
        put: operations["TierHistoryAdminController_update"];
        post?: never;
        /** Tier History */
        delete: operations["TierHistoryAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/point-histories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Point History */
        get: operations["PointHistoryAdminController_list"];
        put?: never;
        /** Point History */
        post: operations["PointHistoryAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/point-histories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Point History */
        get: operations["PointHistoryAdminController_get"];
        /** Point History */
        put: operations["PointHistoryAdminController_update"];
        post?: never;
        /** Point History */
        delete: operations["PointHistoryAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/product-histories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product History */
        get: operations["ProductHistoryAdminController_list"];
        put?: never;
        /** Product History */
        post: operations["ProductHistoryAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/product-histories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product History */
        get: operations["ProductHistoryAdminController_get"];
        /** Product History */
        put: operations["ProductHistoryAdminController_update"];
        post?: never;
        /** Product History */
        delete: operations["ProductHistoryAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product */
        get: operations["ProductAdminController_list"];
        put?: never;
        /** Product */
        post: operations["ProductAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/products/map-shorted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product */
        get: operations["ProductAdminController_mapShorted"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product */
        get: operations["ProductAdminController_get"];
        /** Product */
        put: operations["ProductAdminController_update"];
        post?: never;
        /** Product */
        delete: operations["ProductAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/product-brands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product Brand */
        get: operations["ProductBrandAdminController_list"];
        put?: never;
        /** Product Brand */
        post: operations["ProductBrandAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/product-brands/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product Brand */
        get: operations["ProductBrandAdminController_get"];
        /** Product Brand */
        put: operations["ProductBrandAdminController_update"];
        post?: never;
        /** Product Brand */
        delete: operations["ProductBrandAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/product-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product Category */
        get: operations["ProductCategoryAdminController_list"];
        put?: never;
        /** Product Category */
        post: operations["ProductCategoryAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/product-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product Category */
        get: operations["ProductCategoryAdminController_get"];
        /** Product Category */
        put: operations["ProductCategoryAdminController_update"];
        post?: never;
        /** Product Category */
        delete: operations["ProductCategoryAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/product-reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product Review */
        get: operations["ProductReviewAdminController_list"];
        put?: never;
        /** Product Review */
        post: operations["ProductReviewAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/product-reviews/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Product Review */
        get: operations["ProductReviewAdminController_get"];
        /** Product Review */
        put: operations["ProductReviewAdminController_update"];
        post?: never;
        /** Product Review */
        delete: operations["ProductReviewAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/facts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fact */
        get: operations["FactAdminController_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/facts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fact */
        get: operations["FactAdminController_get"];
        /** Fact */
        put: operations["FactAdminController_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/facts/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Fact */
        put: operations["FactAdminController_active"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/facts/{id}/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Fact */
        put: operations["FactAdminController_inactive"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Tier */
        get: operations["TierAdminController_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tiers/map-shorted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Tier */
        get: operations["TierAdminController_mapShorted"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tiers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Tier */
        get: operations["TierAdminController_get"];
        /** Tier */
        put: operations["TierAdminController_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Order */
        get: operations["OrderAdminController_list"];
        put?: never;
        /** Order */
        post: operations["OrderAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Order */
        get: operations["OrderAdminController_get"];
        /** Order */
        put: operations["OrderAdminController_update"];
        post?: never;
        /** Order */
        delete: operations["OrderAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Invoice */
        get: operations["InvoiceAdminController_list"];
        put?: never;
        /** Invoice */
        post: operations["InvoiceAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/invoices/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Invoice */
        get: operations["InvoiceAdminController_get"];
        /** Invoice */
        put: operations["InvoiceAdminController_update"];
        post?: never;
        /** Invoice */
        delete: operations["InvoiceAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Notification */
        get: operations["NotificationAdminController_list"];
        put?: never;
        /** Notification */
        post: operations["NotificationAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/notifications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Notification */
        get: operations["NotificationAdminController_get"];
        /** Notification */
        put: operations["NotificationAdminController_update"];
        post?: never;
        /** Notification */
        delete: operations["NotificationAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/notifications/{id}/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Notification */
        put: operations["NotificationAdminController_inactive"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/notifications/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Notification */
        put: operations["NotificationAdminController_active"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/pushes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Push */
        get: operations["PushAdminController_list"];
        put?: never;
        /** Push */
        post: operations["PushAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/pushes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Push */
        get: operations["PushAdminController_get"];
        /** Push */
        put: operations["PushAdminController_update"];
        post?: never;
        /** Push */
        delete: operations["PushAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/pushes/{id}/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Push */
        put: operations["PushAdminController_inactive"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/pushes/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Push */
        put: operations["PushAdminController_active"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Media */
        get: operations["MediaAdminController_list"];
        put?: never;
        /** Media */
        post: operations["MediaAdminController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/media/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Media */
        get: operations["MediaAdminController_get"];
        /** Media */
        put: operations["MediaAdminController_update"];
        post?: never;
        /** Media */
        delete: operations["MediaAdminController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserProfileResponseDto: {
            /** @example 1 */
            id: number;
            /** @example  */
            email: string;
        };
        ResponseMetadataDto: Record<string, never>;
        ResponseDataDto: {
            /**
             * @description Return specific status code for every endpoints
             * @example true
             */
            success: boolean;
            /**
             * @description Contain metadata about API
             * @example {
             *       "language": "en",
             *       "timestamp": 1660190937231,
             *       "timezone": "Asia/Ho_Chi_Minh",
             *       "version": "1",
             *       "path": "/api/v1/test/hello"
             *     }
             */
            metadata: components["schemas"]["ResponseMetadataDto"];
        };
        UserRequestSignUpDto: {
            /** @example admin@example.com */
            email: string;
            /** @example Brakus */
            name: string;
            /** @example 1000 Mollie Forges */
            address: string;
            /** Format: binary */
            avatar?: string;
            /** @example admin123 */
            password: string;
        };
        AuthAccessResponseDto: {
            /** @example Bearer */
            tokenType: string;
            /**
             * @description Expire in timestamp
             * @example 1660190937231
             */
            expiresIn: number;
            /**
             * @description Will be valid JWT Encode string
             * @example MnYQtLPpS7xfiROOuBKoAM8UuT6LOE
             */
            accessToken: string;
            /**
             * @description Will be valid JWT Encode string
             * @example elzL6KKjkR6YlgO4CIDxzGTOntNFPp
             */
            refreshToken: string;
        };
        UserRequestSignInDto: {
            /** @example admin@example.com */
            email: string;
            /** @example admin123 */
            password: string;
        };
        UserEditProfileRequestDto: {
            /** @example admin@example.com */
            email: string;
            /** @example 85200000000 */
            phone?: string;
            /** @example Brakus */
            name: string;
            /** @example 1000 Mollie Forges */
            address: string;
            /** @example true */
            isActive: boolean;
            /** @example 1 */
            roleId: number;
        };
        AuthRefreshResponseDto: {
            /** @example Bearer */
            tokenType: string;
            /**
             * @description Expire in timestamp
             * @example 1660190937231
             */
            expiresIn: number;
            /**
             * @description Will be valid JWT Encode string
             * @example MnYQtLPpS7xfiROOuBKoAM8UuT6LOE
             */
            accessToken: string;
            /**
             * @description Will be valid JWT Encode string
             * @example elzL6KKjkR6YlgO4CIDxzGTOntNFPp
             */
            refreshToken: string;
        };
        UserRequestChangePasswordDto: {
            /**
             * @description new string password, newPassword can't same with oldPassword
             * @example admin123
             */
            newPassword: string;
            /**
             * @description old string password
             * @example admin123
             */
            oldPassword: string;
        };
        UserRequestChangeAvatarDto: {
            /** Format: binary */
            avatar?: string;
        };
        UserVerifyPasswordRequestDto: {
            /** @example admin123 */
            password: string;
        };
        UserRequestChangeConfirmPasswordDto: {
            /**
             * @description new confirm password
             * @example admin123
             */
            password: string;
        };
        SettingFileResponseDto: {
            sizeInBytes: number;
        };
        SettingTimezoneResponseDto: {
            timezone: string;
            timezoneOffset: string;
        };
        SettingCoreResponseDto: {
            languages: ("en" | "vi" | "sc" | "tc" | "sc" | "sc")[];
            file: components["schemas"]["SettingFileResponseDto"] & components["schemas"]["SettingFileResponseDto"];
            timezone: components["schemas"]["SettingTimezoneResponseDto"] & components["schemas"]["SettingTimezoneResponseDto"];
            token: string;
        };
        ResponseListingMetadataDto: Record<string, never>;
        ResponseListingDto: {
            /**
             * @description Return specific status code for every endpoints
             * @example true
             */
            success: boolean;
            /**
             * @description Contain metadata about API
             * @example {
             *       "language": "en",
             *       "timestamp": 1660190937231,
             *       "timezone": "Asia/Ho_Chi_Minh",
             *       "appVersion": "1",
             *       "path": "/api/v1/test/hello",
             *       "availableSearch": [],
             *       "availableOrderBy": []
             *     }
             */
            metadata: components["schemas"]["ResponseListingMetadataDto"];
            /** @default [] */
            data: unknown[][];
        };
        SettingResponseDetailDto: {
            /** @example 1 */
            id: number;
            /**
             * @description Name of setting
             * @example MaintenanceOn
             */
            name: string;
            /**
             * @description Code of setting
             * @example MaintenanceOn
             */
            code: string;
            /**
             * @description Description of setting
             * @example Maintenance Mode
             */
            description: string;
            /**
             * @description Data type of setting
             * @example BOOLEAN
             * @enum {string}
             */
            type: "BOOLEAN" | "YESNO" | "ONOFF" | "STRING" | "NUMBER" | "ARRAY_OF_STRING" | "ARRAY_OF_NUMBER";
            /** @description Value of string, can be type string/boolean/number */
            value: Record<string, never> | Record<string, never> | Record<string, never>;
            /**
             * Format: date-time
             * @description Date created at
             * @example 2025-07-31T09:05:04.200Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date updated at
             * @example 2025-08-28T19:52:34.489Z
             */
            updatedAt: string;
        };
        SettingRequestUpdateDto: {
            /**
             * @example Maintenance Mode
             * @example Max Part Number Chunk File
             */
            description?: string;
            /** @description The value of setting */
            value: string | number | boolean;
            /** @description The refer of setting */
            refer: string | null;
        };
        DashboardSummaryResponseDto: Record<string, never>;
        UserBelongInfo: {
            /**
             * @description Id that representative with your target data
             * @example 71
             */
            id: number;
            /**
             * @description Name that representative with your target data
             * @example Angelica26
             */
            name: string;
        };
        ApiKeyResponseListDto: {
            /** @example 8 */
            id: number;
            /**
             * @description Type of api key
             * @example CLIENT
             * @enum {string}
             */
            type: "SYSTEM" | "CLIENT" | "DEFAULT";
            /**
             * @description Alias name of api key
             * @example Chief Communications Associate
             */
            name: string;
            /**
             * @description Unique key of api key
             * @example FWZVbBgxxBEONmr
             */
            key: string;
            /**
             * @description Hash key of api key
             * @example qQEmDEXCGqVYNaZXcHYpFPAThmOubPih
             */
            hash: string;
            /** @example false */
            isDeprecated: boolean;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Api Key start date
             * @example 2025-02-16T01:52:05.393Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Api Key end date
             * @example 2026-04-17T14:31:31.085Z
             */
            untilDate?: string;
            /**
             * Format: date-time
             * @example 2025-02-01T13:44:53.174Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T13:15:04.345Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ResponsePagingMetadataDto: Record<string, never>;
        ResponsePagingDto: {
            /**
             * @description Return specific status code for every endpoints
             * @example true
             */
            success: boolean;
            /**
             * @description Contain metadata about API
             * @example {
             *       "language": "en",
             *       "timestamp": 1660190937231,
             *       "timezone": "Asia/Ho_Chi_Minh",
             *       "version": "1",
             *       "path": "/api/v1/test/hello",
             *       "availableSearch": [],
             *       "availableOrderBy": [],
             *       "pagination": {
             *         "page": 1,
             *         "perPage": 50,
             *         "totalRecord": 100,
             *         "totalPage": 2
             *       }
             *     }
             */
            metadata: components["schemas"]["ResponsePagingMetadataDto"];
            /** @default [] */
            data: unknown[][];
        };
        ApiKeyResponseDetailDto: {
            /** @example 8 */
            id: number;
            /**
             * @description Type of api key
             * @example CLIENT
             * @enum {string}
             */
            type: "SYSTEM" | "CLIENT" | "DEFAULT";
            /**
             * @description Alias name of api key
             * @example Chief Communications Associate
             */
            name: string;
            /**
             * @description Unique key of api key
             * @example FWZVbBgxxBEONmr
             */
            key: string;
            /**
             * @description Hash key of api key
             * @example qQEmDEXCGqVYNaZXcHYpFPAThmOubPih
             */
            hash: string;
            /** @example false */
            isDeprecated: boolean;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Api Key start date
             * @example 2025-02-16T01:52:05.393Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Api Key end date
             * @example 2026-04-17T14:31:31.085Z
             */
            untilDate?: string;
            /**
             * Format: date-time
             * @example 2025-02-01T13:44:53.174Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T13:15:04.345Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ApiKeyRequestCreateDto: {
            /**
             * @description Api Key name
             * @example CLIENT
             * @enum {string}
             */
            type: "SYSTEM" | "CLIENT" | "DEFAULT";
            /**
             * @description Api Key name
             * @example Brakus Inc
             */
            name: string;
            /**
             * Format: date-time
             * @description Api Key start date
             * @example 2025-08-29T05:42:46.447Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Api Key end date
             * @example 2026-05-05T04:40:20.131Z
             */
            untilDate?: string;
        };
        ApiKeyRequestUpdateDto: {
            /**
             * @description Api Key name
             * @example Brakus Inc
             */
            name: string;
            /**
             * Format: date-time
             * @description Api Key start date
             * @example 2025-08-29T05:42:46.447Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Api Key end date
             * @example 2026-05-05T04:40:20.131Z
             */
            untilDate?: string;
        };
        ApiKeyRequestRenewDto: {
            /**
             * Format: date-time
             * @description Api Key start date
             * @example 2025-08-28T14:29:14.189Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Api Key end date
             * @example 2026-06-10T22:44:48.661Z
             */
            untilDate?: string;
        };
        AppVersionResponseListDto: {
            /** @example 9 */
            id: number;
            /**
             * @example IOS
             * @enum {string}
             */
            type: "IOS" | "AOS" | "WEB";
            /** @example Api version name */
            name: string;
            /** @example 0.0.1 */
            version: string;
            /** @example https://elegant-councilman.biz/ */
            url: string;
            /** @example false */
            isForce: boolean;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-01-21T18:53:35.393Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T06:47:07.725Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        AppVersionResponseDetailDto: {
            /** @example 9 */
            id: number;
            /**
             * @example IOS
             * @enum {string}
             */
            type: "IOS" | "AOS" | "WEB";
            /** @example Api version name */
            name: string;
            /** @example 0.0.1 */
            version: string;
            /** @example https://elegant-councilman.biz/ */
            url: string;
            /** @example false */
            isForce: boolean;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-01-21T18:53:35.393Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T06:47:07.725Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        AppVersionRequestCreateDto: {
            /**
             * @description Api Key name
             * @example AOS
             * @enum {string}
             */
            type: "IOS" | "AOS" | "WEB";
            /**
             * @description Api version name
             * @example AOS
             */
            name: string;
            /**
             * @description Api version number
             * @example 0.0.1
             */
            version: string;
            /**
             * @description Api share link
             * @example https://superior-pants.net/
             */
            url: string;
        };
        AppVersionRequestUpdateDto: {
            /**
             * @description Api version name
             * @example AOS
             */
            name: string;
            /**
             * @description Api version number
             * @example 0.0.1
             */
            version: string;
            /**
             * @description Api share link
             * @example https://superior-pants.net/
             */
            url: string;
        };
        UserResponseListDto: {
            /** @example 1 */
            id: number;
            /** @example  */
            email: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        UserResponseDetailDto: {
            /** @example 1 */
            id: number;
            /** @example  */
            email: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        UserRequestCreateDto: {
            /** @example admin@example.com */
            email: string;
            /** @example 85200000000 */
            phone?: string;
            /** @example Brakus */
            name: string;
            /** @example 1000 Mollie Forges */
            address: string;
            /** Format: binary */
            avatar?: string;
            /** @example admin123 */
            password: string;
            /** @example true */
            isActive: boolean;
            /** @example 1 */
            roleId: number;
        };
        UserRequestUpdateDto: {
            /** @example admin@example.com */
            email: string;
            /** @example 85200000000 */
            phone?: string;
            /** @example Brakus */
            name: string;
            /** @example 1000 Mollie Forges */
            address: string;
            /** @example true */
            isActive?: boolean;
            /** @example 1 */
            roleId: number;
            /** @example admin123 */
            password?: string;
        };
        RoleResponseListDto: {
            /** @example 1 */
            id: number;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        RequestFilterDto: Record<string, never>;
        RoleResponseDetailDto: {
            /** @example 1 */
            id: number;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        RolePermissionRequestCreateDto: {
            /** @enum {string} */
            subject: "DASHBOARD" | "SETTING" | "MEDIA" | "API_KEY" | "APP_VERSION" | "ROLE" | "PERMISSION" | "USER" | "FACT" | "COUNTRY" | "DISTRICT" | "MEMBER" | "TIER_HISTORY" | "POINT_HISTORY" | "NOTIFICATION_HISTORY" | "PRODUCT" | "PRODUCT_BRAND" | "PRODUCT_CATEGORY" | "PRODUCT_REVIEW" | "PRODUCT_HISTORY" | "CART" | "INVOICE" | "ORDER" | "TIER" | "NOTIFICATION" | "PUSH" | "PUSH_GROUP";
            actions: ("read" | "create" | "update" | "delete" | "export" | "import")[];
        };
        RoleRequestUpdateDto: {
            /** @example ADMIN */
            title: string;
            description?: Record<string, never>;
            /** @example true */
            isActive: boolean;
            permissions: components["schemas"]["RolePermissionRequestCreateDto"][];
        };
        RoleRequestCreateDto: {
            /** @example ADMIN */
            title: string;
            description?: Record<string, never>;
            /** @example true */
            isActive: boolean;
            permissions: components["schemas"]["RolePermissionRequestCreateDto"][];
        };
        ResponseLocaleDto: {
            /** @example Soluta autem cenaculum. */
            en: string;
            /** @example Confido balbus cura testimonium accommodo fuga iusto cum delectus. */
            vi: string;
        };
        ResponseDataChartDto: {
            /** @example 7 */
            id: number;
            /** @example 3 */
            currId: number;
            /** @example 8 */
            nextId: number;
            /** @example 2 */
            requireSpending: number;
            /** @example true */
            isActive: boolean;
        };
        TierResponseBelongDto: {
            /** @example 7 */
            id: number;
            /** @example NORMAL */
            code: string;
            name: components["schemas"]["ResponseLocaleDto"];
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            charts: components["schemas"]["ResponseDataChartDto"][];
        };
        MemberResponseListDto: {
            /** @example 91 */
            id: number;
            /** @example 2 */
            tierId: number;
            /** @example  */
            code: string;
            /**
             * @example NORMAL
             * @enum {string}
             */
            type: "STAFF" | "NORMAL" | "MASTER";
            /** @example  */
            cardId: string;
            /** @example Laurel_Haag@hotmail.com */
            email: string;
            /** @example Hane */
            name: string;
            /** @example  */
            phone: string;
            /** @example en */
            locale: string;
            /** @example 15343 Jamel Place */
            address: string;
            /** @example  */
            referralCode: string;
            /**
             * Format: date-time
             * @example null
             */
            birthDate: string;
            /**
             * Format: date-time
             * @example null
             */
            expiryDate: string;
            /** @example 0 */
            pointBalance: number;
            /** @example 0 */
            maximumSpending: number;
            /** @example 0 */
            personalSpending: number;
            /** @example 0 */
            referralSpending: number;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-08-28T15:07:26.620Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T21:42:51.274Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            tier: components["schemas"]["TierResponseBelongDto"];
        };
        MemberResponseDetailDto: {
            /** @example 91 */
            id: number;
            /** @example 2 */
            tierId: number;
            /** @example  */
            code: string;
            /**
             * @example NORMAL
             * @enum {string}
             */
            type: "STAFF" | "NORMAL" | "MASTER";
            /** @example  */
            cardId: string;
            /** @example Laurel_Haag@hotmail.com */
            email: string;
            /** @example Hane */
            name: string;
            /** @example  */
            phone: string;
            /** @example en */
            locale: string;
            /** @example 15343 Jamel Place */
            address: string;
            /** @example  */
            referralCode: string;
            /**
             * Format: date-time
             * @example null
             */
            birthDate: string;
            /**
             * Format: date-time
             * @example null
             */
            expiryDate: string;
            /** @example 0 */
            pointBalance: number;
            /** @example 0 */
            maximumSpending: number;
            /** @example 0 */
            personalSpending: number;
            /** @example 0 */
            referralSpending: number;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-08-28T15:07:26.620Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T21:42:51.274Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            tier: components["schemas"]["TierResponseBelongDto"];
        };
        MemberRequestCreateDto: {
            /** @example Watsica */
            name: string;
            /** @example 84332170915 */
            phone: string;
            /** @example nam.dinh@example.com */
            email?: string;
            /** @example X5785184 */
            cardId?: string;
            /** @example 287 Bednar Falls Apt. 147 */
            address?: string;
            /**
             * Format: date-time
             * @example 1957-08-22T23:38:09.552Z
             */
            birthDate?: string;
            /** Format: binary */
            avatar?: string;
            /**
             * @example en
             * @enum {string}
             */
            locale?: "en" | "vi" | "zh_CN" | "zh_HK" | "zh_TW" | "zh_MO";
            /** @example true */
            isActive: boolean;
            /** @example admin123 */
            password: string;
        };
        MemberRequestUpdateDto: {
            /** @example Watsica */
            name: string;
            /** @example 84332170915 */
            phone: string;
            /** @example nam.dinh@example.com */
            email?: string;
            /** @example X5785184 */
            cardId?: string;
            /** @example 287 Bednar Falls Apt. 147 */
            address?: string;
            /**
             * Format: date-time
             * @example 1957-08-22T23:38:09.552Z
             */
            birthDate?: string;
            /**
             * @example en
             * @enum {string}
             */
            locale?: "en" | "vi" | "zh_CN" | "zh_HK" | "zh_TW" | "zh_MO";
            /** @example true */
            isActive: boolean;
            /** @example admin123 */
            password: string;
        };
        MemberChangeAvatarRequestDto: {
            /** Format: binary */
            avatar?: string;
        };
        MemberAddPointRequestDto: {
            /** @example 1 */
            point: number;
        };
        MemberResponseBelongDto: {
            /** @example 91 */
            id: number;
            /** @example  */
            code: string;
            /** @example Hane */
            name: string;
            /** @example  */
            phone: string;
        };
        ProductBrandResponseBelongDto: {
            /** @example 6 */
            id: number;
            name: components["schemas"]["ResponseLocaleDto"];
            /** @example true */
            isActive: boolean;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ProductCategoryResponseBelongDto: {
            /** @example 10 */
            id: number;
            name: components["schemas"]["ResponseLocaleDto"];
            /** @example true */
            isActive: boolean;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ProductResponseBelongDto: {
            /** @example 1 */
            id: number;
            name: components["schemas"]["ResponseLocaleDto"];
            /** @example 0 */
            salePoint: number;
            /** @example 100 */
            salePrice: number;
            /** @example 99 */
            stockQty: number;
            /** @example true */
            isActive: boolean;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            brand: components["schemas"]["ProductBrandResponseBelongDto"];
            category: components["schemas"]["ProductCategoryResponseBelongDto"];
        };
        ResponseDataItemDto: {
            /** @example 6 */
            id: number;
            /** @example 9 */
            orderId: number;
            /** @example 4 */
            productId: number;
            /** @example 9 */
            promotionId: number;
            /** @example 0 */
            quantity: number;
            /** @example 0 */
            unitPrice: number;
            /** @example 0 */
            unitPoint: number;
            /** @example 0 */
            finalPrice: number;
            /** @example 0 */
            finalPoint: number;
            /**
             * Format: date-time
             * @example 2025-08-23T23:22:44.433Z
             */
            expiryDate: string;
            /**
             * Format: date-time
             * @example 2025-08-02T14:48:27.623Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T10:43:10.896Z
             */
            updatedAt: string;
            product: components["schemas"]["ProductResponseBelongDto"];
        };
        OrderResponseDetailDto: {
            /** @example 3 */
            id: number;
            /** @example  */
            code: string;
            /** @example 2 */
            memberId: number;
            /** @example 4 */
            promotionId: number;
            /** @example  */
            totalPrice: number;
            /** @example 1 */
            totalPoint: number;
            /** @example  */
            discPrice: number;
            /** @example 1 */
            discPoint: number;
            /** @example 9 */
            finalPrice: number;
            /** @example 10 */
            finalPoint: number;
            /** @example SYSTEM */
            source: string;
            /** @example DELIVERED */
            status: string;
            /** @example true */
            isBirth: boolean;
            /**
             * Format: date-time
             * @example 2025-07-21T23:37:32.257Z
             */
            issueDate: string;
            /**
             * Format: date-time
             * @example 2024-11-23T15:21:58.512Z
             */
            issuedAt: string;
            /**
             * Format: date-time
             * @example 2025-06-11T18:06:22.002Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T09:19:53.475Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            member: components["schemas"]["MemberResponseBelongDto"];
            items: components["schemas"]["ResponseDataItemDto"][];
        };
        InvoiceResponseBelongDto: {
            /** @example 3 */
            id: number;
            /** @example  */
            code: string;
            /** @example 2 */
            finalPrice: number;
            /** @example 2 */
            finalPoint: number;
            /** @example FULLY_PAID */
            status: string;
            /**
             * Format: date-time
             * @example 2024-10-03T10:04:51.095Z
             */
            issueDate: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            order: components["schemas"]["OrderResponseDetailDto"];
            member: components["schemas"]["MemberResponseBelongDto"];
        };
        TierHistoryResponseListDto: {
            /** @example 4 */
            id: number;
            /** @example 10 */
            memberId: number;
            /** @example 10 */
            invoiceId: number;
            /** @example 9 */
            prevTierId: number;
            /** @example 6 */
            currTierId: number;
            /** @example 1 */
            minTierId: number;
            /** @example SYSTEM */
            type: string;
            /** @example 38.84 */
            maximumSpending: number;
            /** @example 99.46 */
            personalSpending: number;
            /** @example 35.5 */
            referralSpending: number;
            /** @example 87.69 */
            excessSpending: number;
            /** @example 74.62 */
            renewalSpending: number;
            /** @example 9.43 */
            upgradeSpending: number;
            /**
             * Format: date-time
             * @example 2025-03-13T11:17:06.534Z
             */
            expiryDate: string;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2024-10-13T08:04:17.396Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T18:46:46.073Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            member: components["schemas"]["MemberResponseBelongDto"];
            invoice: components["schemas"]["InvoiceResponseBelongDto"];
            prevTier: components["schemas"]["TierResponseBelongDto"];
            currTier: components["schemas"]["TierResponseBelongDto"];
        };
        TierHistoryResponseDetailDto: {
            /** @example 4 */
            id: number;
            /** @example 10 */
            memberId: number;
            /** @example 10 */
            invoiceId: number;
            /** @example 9 */
            prevTierId: number;
            /** @example 6 */
            currTierId: number;
            /** @example 1 */
            minTierId: number;
            /** @example SYSTEM */
            type: string;
            /** @example 38.84 */
            maximumSpending: number;
            /** @example 99.46 */
            personalSpending: number;
            /** @example 35.5 */
            referralSpending: number;
            /** @example 87.69 */
            excessSpending: number;
            /** @example 74.62 */
            renewalSpending: number;
            /** @example 9.43 */
            upgradeSpending: number;
            /**
             * Format: date-time
             * @example 2025-03-13T11:17:06.534Z
             */
            expiryDate: string;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2024-10-13T08:04:17.396Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T18:46:46.073Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            member: components["schemas"]["MemberResponseBelongDto"];
            invoice: components["schemas"]["InvoiceResponseBelongDto"];
            prevTier: components["schemas"]["TierResponseBelongDto"];
            currTier: components["schemas"]["TierResponseBelongDto"];
        };
        TierHistoryRequestCreateDto: {
            /** @example 4456296439170551 */
            memberId: number;
            /** @example 1194688632194243 */
            prevTierId: number;
            /** @example 1760053831948605 */
            currTierId: number;
        };
        TierHistoryRequestUpdateDto: {
            /** @example 4456296439170551 */
            memberId: number;
            /** @example 1194688632194243 */
            prevTierId: number;
            /** @example 1760053831948605 */
            currTierId: number;
        };
        PointHistoryResponseListDto: {
            /** @example 6 */
            id: number;
            /** @example 5 */
            tierId: number;
            /** @example 4 */
            memberId: number;
            /** @example 3 */
            refereeId: number;
            /** @example 7 */
            invoiceId: number;
            /** @example 4312 */
            invoiceAmount: number;
            /** @example PURCHASE */
            type: string;
            /** @example 256 */
            point: number;
            /** @example 244 */
            pointBalance: number;
            /** @example 0.25702051566120143 */
            multipleRatio: number;
            /** @example false */
            isFirst: boolean;
            /** @example false */
            isBirth: boolean;
            /** @example false */
            isPending: boolean;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2024-09-06T23:24:56.040Z
             */
            expiryDate: string;
            /**
             * Format: date-time
             * @example 2025-09-14T20:10:36.675Z
             */
            releaseDate: string;
            /**
             * Format: date-time
             * @example 2024-10-07T07:21:49.378Z
             */
            createdDate: string;
            /**
             * Format: date-time
             * @example 2024-11-14T18:52:45.570Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T21:56:30.824Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            tier: components["schemas"]["TierResponseBelongDto"];
            member: components["schemas"]["MemberResponseBelongDto"];
            referee: components["schemas"]["MemberResponseBelongDto"];
            invoice: components["schemas"]["InvoiceResponseBelongDto"];
        };
        PointHistoryResponseDetailDto: {
            /** @example 6 */
            id: number;
            /** @example 5 */
            tierId: number;
            /** @example 4 */
            memberId: number;
            /** @example 3 */
            refereeId: number;
            /** @example 7 */
            invoiceId: number;
            /** @example 4312 */
            invoiceAmount: number;
            /** @example PURCHASE */
            type: string;
            /** @example 256 */
            point: number;
            /** @example 244 */
            pointBalance: number;
            /** @example 0.25702051566120143 */
            multipleRatio: number;
            /** @example false */
            isFirst: boolean;
            /** @example false */
            isBirth: boolean;
            /** @example false */
            isPending: boolean;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2024-09-06T23:24:56.040Z
             */
            expiryDate: string;
            /**
             * Format: date-time
             * @example 2025-09-14T20:10:36.675Z
             */
            releaseDate: string;
            /**
             * Format: date-time
             * @example 2024-10-07T07:21:49.378Z
             */
            createdDate: string;
            /**
             * Format: date-time
             * @example 2024-11-14T18:52:45.570Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T21:56:30.824Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            tier: components["schemas"]["TierResponseBelongDto"];
            member: components["schemas"]["MemberResponseBelongDto"];
            referee: components["schemas"]["MemberResponseBelongDto"];
            invoice: components["schemas"]["InvoiceResponseBelongDto"];
        };
        PointHistoryRequestCreateDto: {
            /** @example 5683087626854811 */
            memberId: number;
            /** @example 1407007906545436 */
            point: number;
        };
        PointHistoryRequestUpdateDto: {
            /** @example 5683087626854811 */
            memberId: number;
            /** @example 1407007906545436 */
            point: number;
        };
        OrderResponseBelongDto: {
            /** @example 3 */
            id: number;
            /** @example  */
            code: string;
            /** @example  */
            totalPrice: number;
            /** @example 1 */
            totalPoint: number;
            /** @example  */
            discPrice: number;
            /** @example 1 */
            discPoint: number;
            /** @example 9 */
            finalPrice: number;
            /** @example 10 */
            finalPoint: number;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            member: components["schemas"]["MemberResponseBelongDto"];
            items: components["schemas"]["ResponseDataItemDto"][];
        };
        ProductHistoryResponseListDto: {
            /** @example 5 */
            id: number;
            /** @example 1 */
            memberId: number;
            /** @example 3 */
            productId: number;
            /** @example 2 */
            orderId: number;
            /** @example 3 */
            promotionId: number;
            /** @example 997.0788605060444 */
            redeemPrice: number;
            /** @example 88 */
            redeemPoint: number;
            /** @example ORDER */
            source: string;
            /** @example APPROVED */
            status: string;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-06-27T22:51:30.958Z
             */
            startDate: string;
            /**
             * Format: date-time
             * @example 2026-02-16T05:13:42.377Z
             */
            untilDate: string;
            /**
             * Format: date-time
             * @example 2026-02-15T18:54:02.441Z
             */
            expiryDate: string;
            /**
             * Format: date-time
             * @example 2025-06-28T13:50:07.367Z
             */
            issuedDate: string;
            /**
             * Format: date-time
             * @example 2024-11-17T08:17:33.967Z
             */
            usedDate: string;
            /**
             * Format: date-time
             * @example 2024-11-27T10:34:17.768Z
             */
            usedAt: string;
            /**
             * Format: date-time
             * @example 2025-05-03T08:41:32.896Z
             */
            issuedAt: string;
            /**
             * Format: date-time
             * @example 2025-07-20T16:16:30.497Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T06:59:53.838Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            member: components["schemas"]["MemberResponseBelongDto"];
            product: components["schemas"]["ProductResponseBelongDto"];
            order: components["schemas"]["OrderResponseBelongDto"];
        };
        ProductHistoryResponseDetailDto: {
            /** @example 5 */
            id: number;
            /** @example 1 */
            memberId: number;
            /** @example 3 */
            productId: number;
            /** @example 2 */
            orderId: number;
            /** @example 3 */
            promotionId: number;
            /** @example 997.0788605060444 */
            redeemPrice: number;
            /** @example 88 */
            redeemPoint: number;
            /** @example ORDER */
            source: string;
            /** @example APPROVED */
            status: string;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-06-27T22:51:30.958Z
             */
            startDate: string;
            /**
             * Format: date-time
             * @example 2026-02-16T05:13:42.377Z
             */
            untilDate: string;
            /**
             * Format: date-time
             * @example 2026-02-15T18:54:02.441Z
             */
            expiryDate: string;
            /**
             * Format: date-time
             * @example 2025-06-28T13:50:07.367Z
             */
            issuedDate: string;
            /**
             * Format: date-time
             * @example 2024-11-17T08:17:33.967Z
             */
            usedDate: string;
            /**
             * Format: date-time
             * @example 2024-11-27T10:34:17.768Z
             */
            usedAt: string;
            /**
             * Format: date-time
             * @example 2025-05-03T08:41:32.896Z
             */
            issuedAt: string;
            /**
             * Format: date-time
             * @example 2025-07-20T16:16:30.497Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T06:59:53.838Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            member: components["schemas"]["MemberResponseBelongDto"];
            product: components["schemas"]["ProductResponseBelongDto"];
            order: components["schemas"]["OrderResponseBelongDto"];
        };
        ProductHistoryRequestCreateDto: {
            /** @example 6 */
            memberId: number;
            /** @example 6 */
            productId: number;
        };
        ProductHistoryRequestUpdateDto: {
            /** @example 6 */
            memberId: number;
            /** @example 6 */
            productId: number;
        };
        ProductResponseListDto: {
            /** @example 1 */
            id: number;
            /** @example 1 */
            brandId: number;
            /** @example 1 */
            categoryId: number;
            /** @example P01 */
            sku: string;
            /** @example https://picsum.photos/seed/WqC3vrhtsu/1402/970 */
            thumbnail: string;
            name: components["schemas"]["ResponseLocaleDto"];
            content: components["schemas"]["ResponseLocaleDto"][];
            termAndCond: components["schemas"]["ResponseLocaleDto"][];
            /** @example 0 */
            salePoint: number;
            /** @example 100 */
            salePrice: number;
            /** @example 100 */
            costPrice: number;
            /** @example 99 */
            stockQty: number;
            /** @example 0 */
            paidQty: number;
            /** @example 0 */
            unpaidQty: number;
            /** @example 10 */
            salePerPerson: number;
            /** @example 0 */
            sorting: number;
            /** @example 0 */
            duePaidDays: number;
            /**
             * @example STATIC
             * @enum {string}
             */
            expiryType: "STATIC" | "DYNAMIC";
            /** @example 0 */
            dynamicExpiryDays: number;
            /** @example 2025-11-14T14:36:18.452Z */
            dynamicExpiryDate: string;
            /** @example 2026-02-20T15:56:32.375Z */
            staticExpiryDate: string;
            /** @example true */
            hasShipment: boolean;
            /** @example true */
            hasInventory: boolean;
            /** @example true */
            hasExpiration: boolean;
            /** @example true */
            hasDuePayment: boolean;
            /** @example true */
            hasLimitPerson: boolean;
            /** @example true */
            isPopular: boolean;
            /** @example true */
            isBestSale: boolean;
            /** @example true */
            isFlashSale: boolean;
            /** @example true */
            isComingSoon: boolean;
            /** @example true */
            isNewArrival: boolean;
            /** @example true */
            isWishlisted: boolean;
            /** @example true */
            isActive: boolean;
            /** @example false */
            isDeleted: boolean;
            /**
             * Format: date-time
             * @example 2025-08-28T18:55:41.835Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T16:06:21.554Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            brand: components["schemas"]["ProductBrandResponseBelongDto"];
            category: components["schemas"]["ProductCategoryResponseBelongDto"];
        };
        ProductResponseDetailDto: {
            /** @example 1 */
            id: number;
            /** @example 1 */
            brandId: number;
            /** @example 1 */
            categoryId: number;
            /** @example P01 */
            sku: string;
            /** @example https://picsum.photos/seed/WqC3vrhtsu/1402/970 */
            thumbnail: string;
            name: components["schemas"]["ResponseLocaleDto"];
            content: components["schemas"]["ResponseLocaleDto"][];
            termAndCond: components["schemas"]["ResponseLocaleDto"][];
            /** @example 0 */
            salePoint: number;
            /** @example 100 */
            salePrice: number;
            /** @example 100 */
            costPrice: number;
            /** @example 99 */
            stockQty: number;
            /** @example 0 */
            paidQty: number;
            /** @example 0 */
            unpaidQty: number;
            /** @example 10 */
            salePerPerson: number;
            /** @example 0 */
            sorting: number;
            /** @example 0 */
            duePaidDays: number;
            /**
             * @example STATIC
             * @enum {string}
             */
            expiryType: "STATIC" | "DYNAMIC";
            /** @example 0 */
            dynamicExpiryDays: number;
            /** @example 2025-11-14T14:36:18.452Z */
            dynamicExpiryDate: string;
            /** @example 2026-02-20T15:56:32.375Z */
            staticExpiryDate: string;
            /** @example true */
            hasShipment: boolean;
            /** @example true */
            hasInventory: boolean;
            /** @example true */
            hasExpiration: boolean;
            /** @example true */
            hasDuePayment: boolean;
            /** @example true */
            hasLimitPerson: boolean;
            /** @example true */
            isPopular: boolean;
            /** @example true */
            isBestSale: boolean;
            /** @example true */
            isFlashSale: boolean;
            /** @example true */
            isComingSoon: boolean;
            /** @example true */
            isNewArrival: boolean;
            /** @example true */
            isWishlisted: boolean;
            /** @example true */
            isActive: boolean;
            /** @example false */
            isDeleted: boolean;
            /**
             * Format: date-time
             * @example 2025-08-28T18:55:41.835Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T16:06:21.554Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            brand: components["schemas"]["ProductBrandResponseBelongDto"];
            category: components["schemas"]["ProductCategoryResponseBelongDto"];
        };
        RequestSentenceDto: {
            /** @example Volutabrum brevis tamdiu praesentium accusamus. */
            en: string;
            /** @example Amor desino sit apostolus veritatis. */
            vi: string;
        };
        RequestParagraphDto: {
            /** @example Terra reiciendis decumbo volaticus apostolus voro termes absum tui. Comptus cado quae. Consuasor cultellus amiculum votum cunctatio cedo amplus eum. */
            en: string;
            /** @example Vesco adsidue voluptates. Ex video textor decretum arx reiciendis caute decor. Vulticulus substantia sub vigor textor casso cubitum amplitudo. */
            vi: string;
        };
        ProductRequestUpdateDto: {
            /** @example 1 */
            brandId: number;
            /** @example 1 */
            categoryId: number;
            name: components["schemas"]["RequestSentenceDto"];
            termAndCond: components["schemas"]["RequestParagraphDto"];
            content: components["schemas"]["RequestParagraphDto"];
            /** @example 0 */
            sorting: number;
            /** @example 100 */
            salePoint: number;
            /** @example 100 */
            salePrice: number;
            /** @example 100 */
            costPrice: number;
            /** @example 99 */
            stockQty: number;
            /** @example 0 */
            salePerPerson: number;
            /** @example 1 */
            duePaidDays: number;
            /**
             * @example STATIC
             * @enum {string}
             */
            expiryType: "STATIC" | "DYNAMIC";
            /** @example 7 */
            dynamicExpiryDays?: number;
            /**
             * Format: date-time
             * @example 2025-10-03T10:04:29.324Z
             */
            staticExpiryDate?: string;
            /** @example false */
            hasShipment?: boolean;
            /** @example false */
            hasInventory?: boolean;
            /** @example false */
            hasExpiration?: boolean;
            /** @example false */
            hasDuePayment?: boolean;
            /** @example false */
            hasLimitPerson?: boolean;
            /** @example false */
            isPopular?: boolean;
            /** @example false */
            isBestSale?: boolean;
            /** @example false */
            isFlashSale?: boolean;
            /** @example false */
            isComingSoon?: boolean;
            /** @example false */
            isNewArrival?: boolean;
            /** @example false */
            isActive?: boolean;
            /** Format: binary */
            thumbnail?: string;
        };
        ProductRequestCreateDto: {
            /** @example 1 */
            brandId: number;
            /** @example 1 */
            categoryId: number;
            /** @example P0078 */
            sku: string;
            name: components["schemas"]["RequestSentenceDto"];
            termAndCond: components["schemas"]["RequestParagraphDto"];
            content: components["schemas"]["RequestParagraphDto"];
            /** @example 0 */
            sorting: number;
            /** @example 100 */
            salePoint: number;
            /** @example 100 */
            salePrice: number;
            /** @example 100 */
            costPrice: number;
            /** @example 99 */
            stockQty: number;
            /** @example 0 */
            salePerPerson: number;
            /** @example 1 */
            duePaidDays: number;
            /**
             * @example STATIC
             * @enum {string}
             */
            expiryType: "STATIC" | "DYNAMIC";
            /** @example 7 */
            dynamicExpiryDays?: number;
            /**
             * Format: date-time
             * @example 2025-10-03T10:04:29.324Z
             */
            staticExpiryDate?: string;
            /** @example false */
            hasShipment?: boolean;
            /** @example false */
            hasInventory?: boolean;
            /** @example false */
            hasExpiration?: boolean;
            /** @example false */
            hasDuePayment?: boolean;
            /** @example false */
            hasLimitPerson?: boolean;
            /** @example false */
            isPopular?: boolean;
            /** @example false */
            isBestSale?: boolean;
            /** @example false */
            isFlashSale?: boolean;
            /** @example false */
            isComingSoon?: boolean;
            /** @example false */
            isNewArrival?: boolean;
            /** @example false */
            isActive?: boolean;
            /** Format: binary */
            thumbnail?: string;
        };
        ProductBrandResponseListDto: {
            /** @example 6 */
            id: number;
            name: components["schemas"]["ResponseLocaleDto"];
            /** @example  */
            thumbnail: string;
            /** @example  */
            address: string;
            /** @example 0 */
            latitude: number;
            /** @example 0 */
            longitude: string;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-08-19T05:48:28.214Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T01:45:18.399Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ProductBrandResponseDetailDto: {
            /** @example 6 */
            id: number;
            name: components["schemas"]["ResponseLocaleDto"];
            /** @example  */
            thumbnail: string;
            /** @example  */
            address: string;
            /** @example 0 */
            latitude: number;
            /** @example 0 */
            longitude: string;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-08-19T05:48:28.214Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T01:45:18.399Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ProductBrandRequestCreateDto: {
            name: components["schemas"]["RequestSentenceDto"];
            /** @example false */
            isActive?: boolean;
        };
        ProductBrandRequestUpdateDto: {
            name: components["schemas"]["RequestSentenceDto"];
            /** @example false */
            isActive?: boolean;
        };
        ProductCategoryResponseListDto: {
            /** @example 10 */
            id: number;
            name: components["schemas"]["ResponseLocaleDto"];
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-08-25T05:52:59.662Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T22:56:00.556Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ProductCategoryResponseDetailDto: {
            /** @example 10 */
            id: number;
            name: components["schemas"]["ResponseLocaleDto"];
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-08-25T05:52:59.662Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T22:56:00.556Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ProductCategoryRequestCreateDto: {
            name: components["schemas"]["RequestSentenceDto"];
            /** @example false */
            isActive?: boolean;
        };
        ProductCategoryRequestUpdateDto: {
            name: components["schemas"]["RequestSentenceDto"];
            /** @example false */
            isActive?: boolean;
        };
        ProductReviewResponseListDto: {
            /** @example 9 */
            id: number;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-08-17T06:24:59.206Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T20:30:02.392Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ProductReviewResponseDetailDto: {
            /** @example 9 */
            id: number;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-08-17T06:24:59.206Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T20:30:02.392Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        ProductReviewRequestCreateDto: {
            /** @example 1 */
            productId: number;
            /** @example 1 */
            memberId: number;
            /** @example  */
            comment: string;
        };
        ProductReviewRequestUpdateDto: {
            /** @example 1 */
            productId: number;
            /** @example 1 */
            memberId: number;
            /** @example  */
            comment: string;
        };
        FactResponseListDto: {
            /** @example 1 */
            id: number;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        FactResponseDetailDto: {
            /** @example 1 */
            id: number;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        FactRequestUpdateDto: {
            title: components["schemas"]["RequestSentenceDto"];
            content: components["schemas"]["RequestSentenceDto"];
            /** Format: binary */
            thumbnail?: string;
        };
        TierResponseListDto: {
            /** @example 7 */
            id: number;
            /** @example NORMAL */
            code: string;
            name: components["schemas"]["ResponseLocaleDto"];
            description: components["schemas"]["ResponseLocaleDto"][];
            /** @example 0 */
            rewardPoint: number;
            /** @example 0 */
            limitSpending: number;
            /** @example 0 */
            personalRate: number;
            /** @example 0 */
            referralRate: number;
            /** @example 0 */
            initialRate: number;
            /** @example 0 */
            birthdayRatio: number;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            charts: components["schemas"]["ResponseDataChartDto"][];
        };
        TierResponseDetailDto: {
            /** @example 7 */
            id: number;
            /** @example NORMAL */
            code: string;
            name: components["schemas"]["ResponseLocaleDto"];
            description: components["schemas"]["ResponseLocaleDto"][];
            /** @example 0 */
            rewardPoint: number;
            /** @example 0 */
            limitSpending: number;
            /** @example 0 */
            personalRate: number;
            /** @example 0 */
            referralRate: number;
            /** @example 0 */
            initialRate: number;
            /** @example 0 */
            birthdayRatio: number;
            /** @example null */
            cardIcon: string;
            /** @example null */
            cardImage: string;
            /** @example null */
            cardCover: string;
            /**
             * Format: date-time
             * @example 2025-07-24T05:29:43.761Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T01:43:23.913Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            charts: components["schemas"]["ResponseDataChartDto"][];
        };
        TierRequestUpdateDto: {
            name: components["schemas"]["RequestSentenceDto"];
            description: components["schemas"]["RequestSentenceDto"];
            /** @example 0 */
            rewardPoint: number;
            /** @example 1 */
            birthdayRatio: number;
            /** @example 0 */
            limitSpending: number;
            /** @example 10000 */
            initialRate: number;
            /** @example 10000 */
            personalRate: number;
            /** @example 10000 */
            referralRate: number;
        };
        OrderResponseListDto: {
            /** @example 3 */
            id: number;
            /** @example  */
            code: string;
            /** @example 2 */
            memberId: number;
            /** @example 4 */
            promotionId: number;
            /** @example  */
            totalPrice: number;
            /** @example 1 */
            totalPoint: number;
            /** @example  */
            discPrice: number;
            /** @example 1 */
            discPoint: number;
            /** @example 9 */
            finalPrice: number;
            /** @example 10 */
            finalPoint: number;
            /** @example SYSTEM */
            source: string;
            /** @example DELIVERED */
            status: string;
            /** @example true */
            isBirth: boolean;
            /**
             * Format: date-time
             * @example 2025-07-21T23:37:32.257Z
             */
            issueDate: string;
            /**
             * Format: date-time
             * @example 2024-11-23T15:21:58.512Z
             */
            issuedAt: string;
            /**
             * Format: date-time
             * @example 2025-06-11T18:06:22.002Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T09:19:53.475Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            member: components["schemas"]["MemberResponseBelongDto"];
            items: components["schemas"]["ResponseDataItemDto"][];
        };
        OrderRequestCreateDto: {
            /** @example 1 */
            memberId: number;
            /** @example 1 */
            orderId: number;
        };
        OrderRequestUpdateDto: {
            /** @example 1 */
            memberId: number;
            /** @example 1 */
            orderId: number;
        };
        InvoiceResponseListDto: {
            /** @example 3 */
            id: number;
            /** @example  */
            code: string;
            /** @example 9 */
            memberId: number;
            /** @example 8 */
            orderId: number;
            /** @example 9 */
            promotionId: number;
            /** @example  */
            invoiceRef: string;
            /** @example  */
            invoicePath: string;
            /** @example 6 */
            paidPrice: number;
            /** @example 2 */
            paidPoint: number;
            /** @example 2 */
            finalPrice: number;
            /** @example 2 */
            finalPoint: number;
            /** @example FULLY_PAID */
            status: string;
            /** @example true */
            isBirth: boolean;
            /** @example true */
            isEarned: boolean;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2026-02-27T17:27:40.503Z
             */
            dueDate: string;
            /**
             * Format: date-time
             * @example 2024-10-03T10:04:51.095Z
             */
            issueDate: string;
            /**
             * Format: date-time
             * @example 2025-05-06T12:52:03.858Z
             */
            issuedAt: string;
            /**
             * Format: date-time
             * @example 2024-12-27T04:42:26.424Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T19:45:32.779Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            order: components["schemas"]["OrderResponseDetailDto"];
            member: components["schemas"]["MemberResponseBelongDto"];
        };
        InvoiceResponseDetailDto: {
            /** @example 3 */
            id: number;
            /** @example  */
            code: string;
            /** @example 9 */
            memberId: number;
            /** @example 8 */
            orderId: number;
            /** @example 9 */
            promotionId: number;
            /** @example  */
            invoiceRef: string;
            /** @example  */
            invoicePath: string;
            /** @example 6 */
            paidPrice: number;
            /** @example 2 */
            paidPoint: number;
            /** @example 2 */
            finalPrice: number;
            /** @example 2 */
            finalPoint: number;
            /** @example FULLY_PAID */
            status: string;
            /** @example true */
            isBirth: boolean;
            /** @example true */
            isEarned: boolean;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2026-02-27T17:27:40.503Z
             */
            dueDate: string;
            /**
             * Format: date-time
             * @example 2024-10-03T10:04:51.095Z
             */
            issueDate: string;
            /**
             * Format: date-time
             * @example 2025-05-06T12:52:03.858Z
             */
            issuedAt: string;
            /**
             * Format: date-time
             * @example 2024-12-27T04:42:26.424Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T19:45:32.779Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            order: components["schemas"]["OrderResponseDetailDto"];
            member: components["schemas"]["MemberResponseBelongDto"];
        };
        InvoiceRequestCreateDto: {
            /** @example 1 */
            memberId: number;
            /** @example 1 */
            orderId: number;
        };
        InvoiceRequestUpdateDto: {
            /** @example 1 */
            memberId: number;
            /** @example 1 */
            orderId: number;
        };
        PushResponseBelongDto: {
            /** @example 8 */
            id: number;
            /** @example 1 */
            notificationId: number;
            /** @example DAILY */
            type: string;
            /** @example COMPLETED */
            status: string;
            /** @example 2024-08-30T16:10:52.163Z */
            executeTime: string;
            /** @example 2024-10-23T08:41:52.426Z */
            executeDate: string;
            /** @example 1 */
            weekday: number;
            /** @example 1 */
            day: number;
            /** @example 1 */
            month: number;
            /**
             * Format: date-time
             * @example 2024-10-25T06:49:14.151Z
             */
            startDate: string;
            /**
             * Format: date-time
             * @example 2025-01-21T07:47:12.193Z
             */
            untilDate: string;
            /** @example 1 */
            retries: number;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2026-05-26T13:57:55.147Z
             */
            expiresAt: string;
            /**
             * Format: date-time
             * @example 2025-08-31T16:39:23.187Z
             */
            scheduledAt: string;
            /**
             * Format: date-time
             * @example 2024-09-03T20:20:45.719Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T20:03:19.855Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            notification: Record<string, never>;
        };
        ResponseGroupRelationDto: {
            /** @example 10 */
            id: number;
            title: components["schemas"]["ResponseLocaleDto"];
            /** @example [] */
            tierIds: string[];
            /** @example [] */
            emails: string[];
            /** @example [] */
            phones: string[];
            /** @example 2025-02-15T13:54:12.904Z */
            joinSinceDate: string[];
            /** @example 2025-03-26T04:03:08.453Z */
            joinUntilDate: string[];
        };
        NotificationResponseListDto: {
            /** @example 6 */
            id: number;
            /** @example SMS */
            channel: string;
            /** @example TEXT */
            type: string;
            /** @example 5 */
            refId: number;
            /** @example TEXT */
            refType: string;
            title: components["schemas"]["ResponseLocaleDto"];
            description: components["schemas"]["ResponseLocaleDto"];
            content: components["schemas"]["ResponseLocaleDto"];
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2024-09-04T01:09:27.737Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T07:45:01.985Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            pushes: components["schemas"]["PushResponseBelongDto"][];
            groups: components["schemas"]["ResponseGroupRelationDto"][];
        };
        NotificationResponseDetailDto: {
            /** @example 6 */
            id: number;
            /** @example SMS */
            channel: string;
            /** @example TEXT */
            type: string;
            /** @example 5 */
            refId: number;
            /** @example TEXT */
            refType: string;
            title: components["schemas"]["ResponseLocaleDto"];
            description: components["schemas"]["ResponseLocaleDto"];
            content: components["schemas"]["ResponseLocaleDto"];
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2024-09-04T01:09:27.737Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-29T07:45:01.985Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            pushes: components["schemas"]["PushResponseBelongDto"][];
            groups: components["schemas"]["ResponseGroupRelationDto"][];
        };
        RequestContentDto: {
            /** @example <p>Ex vehemens officia adversus coruscus solum. In itaque delicate aegrus deprecator curtus accusamus spes condico sint. Fuga conculco patrocinor.</p>Sum demo celebrer cunctatio acervus aliquam depereo deripio volaticus defleo. Verus exercitationem tamdiu calamitas voveo aegrus solio. Correptius arbustum angelus video.</p> */
            en: string;
            /** @example <p>Apud cena distinctio carmen averto deinde vis claro solitudo. Adeo subseco enim antepono speculum ultio. Defero caput suasoria vociferor suffoco.</p>Atqui amplitudo vigor solitudo calcar. Curtus virtus solio cito capitulus ustilo vicinus casus adversus. Deorsum tempora neque possimus.</p>Curvo concido truculenter consequatur annus. Brevis certe voluntarius attonbitus audeo. Una bis canonicus usitas peior beatus cursus subseco.</p>Crapula temeritas stabilis creber. A arx adipiscor decipio. Aveho video tamquam cena confugo porro vesper tenax ancilla.</p>Delinquo strenuus alias subito sto ab delectatio debitis adeptio. Vesco cervus rem volutabrum suscipit stipes contra peior. Cornu vitae cattus currus vacuus coma defungo alienus circumvenio vilitas.</p> */
            vi: string;
        };
        NotificationPushCreateDto: {
            /**
             * @example INSTANT
             * @enum {string}
             */
            type: "INSTANT" | "DATETIME" | "DAILY" | "WEEKLY" | "MONTHLY" | "YEARLY";
            /** @example  */
            executeTime: string;
            /** @example 2026-06-06T21:14:40.171Z */
            executeDate: string;
            /** @example  */
            weekday?: number;
            /** @example  */
            day?: number;
            /** @example  */
            month?: number;
            /**
             * Format: date-time
             * @example 2025-11-08T05:45:10.288Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @example 2026-05-02T12:17:29.587Z
             */
            untilDate?: string;
            /** @example true */
            isActive?: boolean;
        };
        NotificationRequestCreateDto: {
            /**
             * @example SMS
             * @enum {string}
             */
            channel: "SMS" | "EMAIL" | "WHATAPP";
            /**
             * @example TEXT
             * @enum {string}
             */
            type: "TEXT" | "REFERRENCE";
            /** @example  */
            refId?: number;
            /**
             * @example TEXT
             * @enum {string}
             */
            refType?: "TEXT";
            title: components["schemas"]["RequestSentenceDto"];
            description: components["schemas"]["RequestParagraphDto"];
            content: components["schemas"]["RequestContentDto"];
            /** @example true */
            isActive?: boolean;
            pushes?: components["schemas"]["NotificationPushCreateDto"][];
            groupIds?: number[];
        };
        NotificationRequestUpdateDto: {
            /** @example  */
            refId?: number;
            /**
             * @example TEXT
             * @enum {string}
             */
            refType?: "TEXT";
            title: components["schemas"]["RequestSentenceDto"];
            description: components["schemas"]["RequestParagraphDto"];
            content: components["schemas"]["RequestContentDto"];
            /** @example true */
            isActive?: boolean;
            pushes?: components["schemas"]["NotificationPushCreateDto"][];
            groupIds?: number[];
        };
        PushResponseListDto: {
            /** @example 8 */
            id: number;
            /** @example 1 */
            notificationId: number;
            /** @example DAILY */
            type: string;
            /** @example COMPLETED */
            status: string;
            /** @example 2024-08-30T16:10:52.163Z */
            executeTime: string;
            /** @example 2024-10-23T08:41:52.426Z */
            executeDate: string;
            /** @example 1 */
            weekday: number;
            /** @example 1 */
            day: number;
            /** @example 1 */
            month: number;
            /**
             * Format: date-time
             * @example 2024-10-25T06:49:14.151Z
             */
            startDate: string;
            /**
             * Format: date-time
             * @example 2025-01-21T07:47:12.193Z
             */
            untilDate: string;
            /** @example 1 */
            retries: number;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2026-05-26T13:57:55.147Z
             */
            expiresAt: string;
            /**
             * Format: date-time
             * @example 2025-08-31T16:39:23.187Z
             */
            scheduledAt: string;
            /**
             * Format: date-time
             * @example 2024-09-03T20:20:45.719Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T20:03:19.855Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            notification: Record<string, never>;
        };
        PushResponseDetailDto: {
            /** @example 8 */
            id: number;
            /** @example 1 */
            notificationId: number;
            /** @example DAILY */
            type: string;
            /** @example COMPLETED */
            status: string;
            /** @example 2024-08-30T16:10:52.163Z */
            executeTime: string;
            /** @example 2024-10-23T08:41:52.426Z */
            executeDate: string;
            /** @example 1 */
            weekday: number;
            /** @example 1 */
            day: number;
            /** @example 1 */
            month: number;
            /**
             * Format: date-time
             * @example 2024-10-25T06:49:14.151Z
             */
            startDate: string;
            /**
             * Format: date-time
             * @example 2025-01-21T07:47:12.193Z
             */
            untilDate: string;
            /** @example 1 */
            retries: number;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2026-05-26T13:57:55.147Z
             */
            expiresAt: string;
            /**
             * Format: date-time
             * @example 2025-08-31T16:39:23.187Z
             */
            scheduledAt: string;
            /**
             * Format: date-time
             * @example 2024-09-03T20:20:45.719Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T20:03:19.855Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
            notification: Record<string, never>;
        };
        PushRequestCreateDto: {
            /** @example 1 */
            notificationId: number;
            /**
             * @example INSTANT
             * @enum {string}
             */
            type: "INSTANT" | "DATETIME" | "DAILY" | "WEEKLY" | "MONTHLY" | "YEARLY";
            /** @example  */
            executeTime: string;
            /** @example 2026-06-06T21:14:40.171Z */
            executeDate: string;
            /** @example  */
            weekday?: number;
            /** @example  */
            day?: number;
            /** @example  */
            month?: number;
            /**
             * Format: date-time
             * @example 2025-11-08T05:45:10.288Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @example 2026-05-02T12:17:29.587Z
             */
            untilDate?: string;
            /** @example true */
            isActive?: boolean;
        };
        PushRequestUpdateDto: {
            /** @example 1 */
            notificationId: number;
            /**
             * @example INSTANT
             * @enum {string}
             */
            type: "INSTANT" | "DATETIME" | "DAILY" | "WEEKLY" | "MONTHLY" | "YEARLY";
            /** @example  */
            executeTime: string;
            /** @example 2026-06-06T21:14:40.171Z */
            executeDate: string;
            /** @example  */
            weekday?: number;
            /** @example  */
            day?: number;
            /** @example  */
            month?: number;
            /**
             * Format: date-time
             * @example 2025-11-08T05:45:10.288Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @example 2026-05-02T12:17:29.587Z
             */
            untilDate?: string;
            /** @example true */
            isActive?: boolean;
        };
        MediaResponseListDto: {
            /** @example 4 */
            id: number;
            /**
             * @example BANNER
             * @enum {string}
             */
            type: "BANNER" | "SLIDER";
            /** @example https://picsum.photos/seed/Od6Xui/2286/477 */
            url: string;
            /** @example  */
            mime: string;
            title: components["schemas"]["ResponseLocaleDto"];
            brief: components["schemas"]["ResponseLocaleDto"];
            /** @example  */
            refType: string;
            /** @example  */
            refValue: string;
            /** @example 0 */
            sorting: number;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-04-06T03:36:29.793Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T17:32:21.772Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        MediaResponseDetailDto: {
            /** @example 4 */
            id: number;
            /**
             * @example BANNER
             * @enum {string}
             */
            type: "BANNER" | "SLIDER";
            /** @example https://picsum.photos/seed/Od6Xui/2286/477 */
            url: string;
            /** @example  */
            mime: string;
            title: components["schemas"]["ResponseLocaleDto"];
            brief: components["schemas"]["ResponseLocaleDto"];
            /** @example  */
            refType: string;
            /** @example  */
            refValue: string;
            /** @example 0 */
            sorting: number;
            /** @example true */
            isActive: boolean;
            /**
             * Format: date-time
             * @example 2025-04-06T03:36:29.793Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-08-28T17:32:21.772Z
             */
            updatedAt: string;
            createdBy: components["schemas"]["UserBelongInfo"];
            updatedBy: components["schemas"]["UserBelongInfo"];
            deletedBy: components["schemas"]["UserBelongInfo"];
            assignedBy: components["schemas"]["UserBelongInfo"];
        };
        MediaRequestCreateDto: {
            /**
             * @example BANNER
             * @enum {string}
             */
            type: "BANNER" | "SLIDER";
            title: components["schemas"]["RequestSentenceDto"];
            brief: components["schemas"]["RequestSentenceDto"];
            /** @example 0 */
            sorting: number;
            /**
             * @example TEXT
             * @enum {string}
             */
            refType?: "TEXT";
            /** @example  */
            refValue?: string;
            /** @example true */
            isActive?: boolean;
            /** Format: binary */
            url?: string;
        };
        MediaRequestUpdateDto: {
            /**
             * @example BANNER
             * @enum {string}
             */
            type: "BANNER" | "SLIDER";
            title: components["schemas"]["RequestSentenceDto"];
            brief: components["schemas"]["RequestSentenceDto"];
            /** @example 0 */
            sorting: number;
            /**
             * @example TEXT
             * @enum {string}
             */
            refType?: "TEXT";
            /** @example  */
            refValue?: string;
            /** @example true */
            isActive?: boolean;
            /** Format: binary */
            url?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    UserAuthController_signUp: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequestSignUpDto"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequestSignUpDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAuthController_login: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequestSignInDto"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequestSignInDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAuthController_me: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAuthController_editProfile: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserEditProfileRequestDto"];
                "application/x-www-form-urlencoded": components["schemas"]["UserEditProfileRequestDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAuthController_refresh: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAuthController_changePassword: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequestChangePasswordDto"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequestChangePasswordDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAuthController_changeAvatar: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UserRequestChangeAvatarDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAuthController_confirmPassword: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserVerifyPasswordRequestDto"];
                "application/x-www-form-urlencoded": components["schemas"]["UserVerifyPasswordRequestDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAuthController_changeConfirmPassword: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequestChangeConfirmPasswordDto"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequestChangeConfirmPasswordDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SettingAdminController_getUserMaxCertificate: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SettingAdminController_clean: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SettingAdminController_list: {
        parameters: {
            query?: {
                /** @description Group */
                group?: "SYSTEM" | "APP_VERSION" | "OPEN_WORK";
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SettingAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                /** @description setting id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SettingAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                /** @description setting id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SettingRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["SettingRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DashboardAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DashboardAdminController_refresh: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DashboardAdminController_viewDataList: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApiKeyAdminController_list: {
        parameters: {
            query?: {
                isActive?: boolean;
                type?: "SYSTEM" | "CLIENT" | "DEFAULT";
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ApiKeyResponseListDto"];
                    } & components["schemas"]["ResponsePagingDto"];
                };
            };
        };
    };
    ApiKeyAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiKeyRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ApiKeyRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApiKeyAdminController_mapShorted: {
        parameters: {
            query?: {
                type?: "SYSTEM" | "CLIENT" | "DEFAULT";
                isActive?: boolean;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"][];
                    } & components["schemas"]["ResponseListingDto"];
                };
            };
        };
    };
    ApiKeyAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApiKeyAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiKeyRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ApiKeyRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApiKeyAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApiKeyAdminController_reset: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApiKeyAdminController_renew: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiKeyRequestRenewDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ApiKeyRequestRenewDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApiKeyAdminController_inactive: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApiKeyAdminController_active: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppVersionAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppVersionAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppVersionRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["AppVersionRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppVersionAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppVersionAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppVersionRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["AppVersionRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppVersionAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppVersionAdminController_inactive: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppVersionAdminController_active: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAdminController_list: {
        parameters: {
            query?: {
                roleId?: number;
                phone?: string;
                name?: string;
                /** @description boolean value */
                isActive?: "true" | "false";
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UserRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAdminController_getLoginHistories: {
        parameters: {
            query: {
                month: number;
                year: number;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserAdminController_changeAvatar: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UserRequestChangeAvatarDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleAdminController_list: {
        parameters: {
            query?: {
                isActive?: boolean;
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["RoleRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleAdminController_mapShorted: {
        parameters: {
            query: {
                isActive: components["schemas"]["RequestFilterDto"];
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleAdminController_new: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["RoleRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleAdminController_active: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleAdminController_inactive: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PermissionAdminController_list: {
        parameters: {
            query: {
                isActive: components["schemas"]["RequestFilterDto"];
                isVisible: components["schemas"]["RequestFilterDto"];
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberAdminController_list: {
        parameters: {
            query?: {
                phone?: string;
                email?: string;
                name?: string;
                isActive?: boolean;
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["MemberRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberAdminController_mapShorted: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberAdminController_put: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["MemberRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberAdminController_inactive: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberAdminController_active: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["MemberChangeAvatarRequestDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberAdminController_addPoint: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberAddPointRequestDto"];
                "application/x-www-form-urlencoded": components["schemas"]["MemberAddPointRequestDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TierHistoryAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TierHistoryAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TierHistoryRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["TierHistoryRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TierHistoryAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TierHistoryAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TierHistoryRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["TierHistoryRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TierHistoryAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PointHistoryAdminController_list: {
        parameters: {
            query?: {
                memberCode?: string;
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PointHistoryAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PointHistoryRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["PointHistoryRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PointHistoryAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PointHistoryAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PointHistoryRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["PointHistoryRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PointHistoryAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductHistoryAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductHistoryAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductHistoryRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductHistoryRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductHistoryAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductHistoryAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductHistoryRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductHistoryRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductHistoryAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductAdminController_list: {
        parameters: {
            query?: {
                isActive?: boolean;
                price?: string;
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ProductRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductAdminController_mapShorted: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ProductRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductBrandAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductBrandAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductBrandRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductBrandRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductBrandAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductBrandAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductBrandRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductBrandRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductBrandAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductCategoryAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductCategoryAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductCategoryRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductCategoryRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductCategoryAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductCategoryAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductCategoryRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductCategoryRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductCategoryAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductReviewAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductReviewAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductReviewRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductReviewRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductReviewAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductReviewAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductReviewRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductReviewRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductReviewAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FactAdminController_list: {
        parameters: {
            query?: {
                type?: "ABOUT_US" | "PRIVACY" | "TERM_AND_CONDITION";
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FactAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FactAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["FactRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FactAdminController_active: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FactAdminController_inactive: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TierAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TierAdminController_mapShorted: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TierAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TierAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TierRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["TierRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InvoiceAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InvoiceAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InvoiceAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InvoiceAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["InvoiceRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InvoiceAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationAdminController_inactive: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationAdminController_active: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PushAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PushAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PushRequestCreateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["PushRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PushAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PushAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PushRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["PushRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PushAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PushAdminController_inactive: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PushAdminController_active: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MediaAdminController_list: {
        parameters: {
            query?: {
                /** @description Data per page */
                perPage?: number;
                /** @description Page number */
                page?: number;
                /** @description Order by base on metadata.availableOrderBy */
                orderBy?: string;
            };
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MediaAdminController_create: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["MediaRequestCreateDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MediaAdminController_get: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MediaAdminController_update: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MediaRequestUpdateDto"];
                "application/x-www-form-urlencoded": components["schemas"]["MediaRequestUpdateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MediaAdminController_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-language"?: "en" | "vi";
                /** @description Timezone header */
                "x-timezone"?: "UTC" | "Asia/Ho_Chi_Minh";
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
